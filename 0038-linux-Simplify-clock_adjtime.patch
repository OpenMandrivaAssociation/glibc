From 4f7092348df72decb525f9b24ae10931429f8e08 Mon Sep 17 00:00:00 2001
From: Adhemerval Zanella <adhemerval.zanella@linaro.org>
Date: Thu, 9 Jul 2020 16:42:14 -0300
Subject: [PATCH 038/267] linux: Simplify clock_adjtime

With arch-syscall.h it can now assumes the existance of either
__NR_clock_adjtime or __NR_clock_adjtime_time64.  The 32-bit time_t
support is now only build for !__ASSUME_TIME64_SYSCALLS.

Checked on x86_64-linux-gnu and i686-linux-gnu (on 5.4 and on 4.15
kernel).

Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
Reviewed-by: Lukasz Majewski <lukma@denx.de>
---
 sysdeps/unix/sysv/linux/clock_adjtime.c | 23 ++++++++++-------------
 1 file changed, 10 insertions(+), 13 deletions(-)

diff --git a/sysdeps/unix/sysv/linux/clock_adjtime.c b/sysdeps/unix/sysv/linux/clock_adjtime.c
index 764a60b9bf..4caff2ad05 100644
--- a/sysdeps/unix/sysv/linux/clock_adjtime.c
+++ b/sysdeps/unix/sysv/linux/clock_adjtime.c
@@ -26,15 +26,13 @@
 int
 __clock_adjtime64 (const clockid_t clock_id, struct __timex64 *tx64)
 {
-#ifdef __ASSUME_TIME64_SYSCALLS
-# ifndef __NR_clock_adjtime64
-#  define __NR_clock_adjtime64 __NR_clock_adjtime
-# endif
-	return INLINE_SYSCALL_CALL (clock_adjtime64, clock_id, tx64);
-#else
-  int ret = INLINE_SYSCALL_CALL (clock_adjtime64, clock_id, tx64);
-  if (errno != ENOSYS)
-    return ret;
+#ifndef __NR_clock_adjtime64
+# define __NR_clock_adjtime64 __NR_clock_adjtime
+#endif
+  int r = INLINE_SYSCALL_CALL (clock_adjtime64, clock_id, tx64);
+#ifndef __ASSUME_TIME64_SYSCALLS
+  if (r >= 0 || errno != ENOSYS)
+    return r;
 
   if (tx64->modes & ADJ_SETOFFSET
       && ! in_time_t_range (tx64->time.tv_sec))
@@ -44,12 +42,11 @@ __clock_adjtime64 (const clockid_t clock_id, struct __timex64 *tx64)
     }
 
   struct timex tx32 = valid_timex64_to_timex (*tx64);
-  int retval = INLINE_SYSCALL_CALL (clock_adjtime, clock_id, &tx32);
-  if (retval >= 0)
+  r = INLINE_SYSCALL_CALL (clock_adjtime, clock_id, &tx32);
+  if (r >= 0)
     *tx64 = valid_timex_to_timex64 (tx32);
-
-  return retval;
 #endif
+  return r;
 }
 
 #if __TIMESIZE != 64
-- 
2.29.0

