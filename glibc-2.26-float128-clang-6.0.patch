diff -Naur glibc-2.26/math/complex.h glibc-2.26.tpg/math/complex.h
--- glibc-2.26/math/complex.h	2017-08-02 12:57:16.000000000 +0000
+++ glibc-2.26.tpg/math/complex.h	2018-01-03 22:41:02.787271824 +0000
@@ -59,7 +59,7 @@
 # define CMPLXL(x, y) __builtin_complex ((long double) (x), (long double) (y))
 #endif
 
-#if __HAVE_FLOAT128 && __GLIBC_USE (IEC_60559_TYPES_EXT)
+#if __HAVE_FLOAT128 && __GLIBC_USE (IEC_60559_TYPES_EXT) && !defined(__clang__)
 # define CMPLXF128(x, y) __builtin_complex ((_Float128) (x), (_Float128) (y))
 #endif
 
@@ -93,7 +93,7 @@
 #undef	__MATH_PRECNAME
 
 #if (__HAVE_DISTINCT_FLOAT128 || (__HAVE_FLOAT128 && !defined _LIBC)) \
-     && __GLIBC_USE (IEC_60559_TYPES_EXT)
+     && __GLIBC_USE (IEC_60559_TYPES_EXT) && !defined(__clang__)
 # ifndef _Mfloat128_
 #  define _Mfloat128_		_Float128
 # endif
diff -Naur glibc-2.26/math/math.h glibc-2.26.tpg/math/math.h
--- glibc-2.26/math/math.h	2018-01-03 22:31:04.069489000 +0000
+++ glibc-2.26.tpg/math/math.h	2018-01-03 22:39:33.073154522 +0000
@@ -131,8 +131,8 @@
 typedef _Float64x float_t;
 typedef _Float64x double_t;
 # elif __GLIBC_FLT_EVAL_METHOD == 128
-typedef _Float128 float_t;
-typedef _Float128 double_t;
+typedef __float128 float_t;
+typedef __float128 double_t;
 # elif __GLIBC_FLT_EVAL_METHOD == 129
 typedef _Float128x float_t;
 typedef _Float128x double_t;
@@ -327,12 +327,12 @@
 
 #endif	/* Use ISO C99.  */
 
-/* Include the file of declarations again, this time using `_Float128'
+/* Include the file of declarations again, this time using `__float128'
    instead of `double' and appending f128 to each function name.  */
 
 #if __HAVE_DISTINCT_FLOAT128 || (__HAVE_FLOAT128 && !defined _LIBC)
 # ifndef _Mfloat128_
-#  define _Mfloat128_		_Float128
+#  define _Mfloat128_		__float128
 # endif
 # define _Mdouble_		_Mfloat128_
 # define __MATH_PRECNAME(name,r) name##f128##r
@@ -380,7 +380,7 @@
 	       float: FUNC ## f ARGS,		\
 	       default: FUNC ARGS,		\
 	       long double: FUNC ## l ARGS,	\
-	       _Float128: FUNC ## f128 ARGS)
+	       __float128: FUNC ## f128 ARGS)
 # else
 #  define __MATH_TG(TG_ARG, FUNC, ARGS)					\
      __builtin_choose_expr						\
@@ -431,8 +431,8 @@
    the __SUPPORT_SNAN__ check may be skipped for those versions.  */
 
 /* Return number of classification appropriate for X.  */
-# if __GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__			      \
-     && (!defined __OPTIMIZE_SIZE__ || defined __cplusplus)
+# if 1 || (__GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__  \
+     && !defined __OPTIMIZE_SIZE__ || defined __cplusplus)
      /* The check for __cplusplus allows the use of the builtin, even
 	when optimization for size is on.  This is provided for
 	libstdc++, only to let its configure test work when it is built
@@ -494,7 +494,7 @@
       for __builtin_types_compatible_p (and when in C++ mode, this macro is
       not used anyway, because libstdc++ headers undefine it).  */
 #  define isinf(x) \
-    (__builtin_types_compatible_p (__typeof (x), _Float128) \
+    (__builtin_types_compatible_p (__typeof (x), __float128) \
      ? __isinff128 (x) : __builtin_isinf_sign (x))
 # elif __GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__
 #  define isinf(x) __builtin_isinf_sign (x)
@@ -768,7 +768,7 @@
 /* Include bits/math-finite.h for float128.  */
 # if (__HAVE_DISTINCT_FLOAT128 || (__HAVE_FLOAT128 && !defined _LIBC)) \
       && __GLIBC_USE (IEC_60559_TYPES_EXT)
-#  define _Mdouble_ _Float128
+#  define _Mdouble_ __float128
 #  define __MATH_DECLARING_DOUBLE 0
 #  define __MATH_DECLARING_FLOATN 1
 #  define __REDIRFROM_X(function, reentrant) \
