diff -up glibc-2.33/sysdeps/x86/cacheinfo.c.omv~ glibc-2.33/sysdeps/x86/cacheinfo.c
--- glibc-2.33/sysdeps/x86/cacheinfo.c.omv~	2021-03-09 19:46:58.423901087 +0100
+++ glibc-2.33/sysdeps/x86/cacheinfo.c	2021-03-09 19:47:31.414139109 +0100
@@ -32,6 +32,9 @@ __cache_sysconf (int name)
     case _SC_LEVEL1_ICACHE_SIZE:
       return cpu_features->level1_icache_size;
 
+    case _SC_LEVEL1_ICACHE_LINESIZE:
+      return cpu_features->level1_icache_linesize;
+
     case _SC_LEVEL1_DCACHE_SIZE:
       return cpu_features->level1_dcache_size;
 
diff -up glibc-2.33/sysdeps/x86/dl-cacheinfo.h.omv~ glibc-2.33/sysdeps/x86/dl-cacheinfo.h
--- glibc-2.33/sysdeps/x86/dl-cacheinfo.h.omv~	2021-03-09 19:47:38.907526756 +0100
+++ glibc-2.33/sysdeps/x86/dl-cacheinfo.h	2021-03-09 19:49:22.804955174 +0100
@@ -707,6 +707,7 @@ dl_init_cacheinfo (struct cpu_features *
   long int core;
   unsigned int threads = 0;
   unsigned long int level1_icache_size = -1;
+  unsigned long int level1_icache_linesize = -1;
   unsigned long int level1_dcache_size = -1;
   unsigned long int level1_dcache_assoc = -1;
   unsigned long int level1_dcache_linesize = -1;
@@ -726,6 +727,8 @@ dl_init_cacheinfo (struct cpu_features *
 
       level1_icache_size
 	= handle_intel (_SC_LEVEL1_ICACHE_SIZE, cpu_features);
+      level1_icache_linesize
+ 	= handle_intel (_SC_LEVEL1_ICACHE_LINESIZE, cpu_features);
       level1_dcache_size = data;
       level1_dcache_assoc
 	= handle_intel (_SC_LEVEL1_DCACHE_ASSOC, cpu_features);
@@ -753,6 +756,7 @@ dl_init_cacheinfo (struct cpu_features *
       shared = handle_zhaoxin (_SC_LEVEL3_CACHE_SIZE);
 
       level1_icache_size = handle_zhaoxin (_SC_LEVEL1_ICACHE_SIZE);
+      level1_icache_linesize = handle_zhaoxin (_SC_LEVEL1_ICACHE_LINESIZE);
       level1_dcache_size = data;
       level1_dcache_assoc = handle_zhaoxin (_SC_LEVEL1_DCACHE_ASSOC);
       level1_dcache_linesize = handle_zhaoxin (_SC_LEVEL1_DCACHE_LINESIZE);
@@ -772,6 +776,7 @@ dl_init_cacheinfo (struct cpu_features *
       shared = handle_amd (_SC_LEVEL3_CACHE_SIZE);
 
       level1_icache_size = handle_amd (_SC_LEVEL1_ICACHE_SIZE);
+      level1_icache_linesize = handle_amd (_SC_LEVEL1_ICACHE_LINESIZE);
       level1_dcache_size = data;
       level1_dcache_assoc = handle_amd (_SC_LEVEL1_DCACHE_ASSOC);
       level1_dcache_linesize = handle_amd (_SC_LEVEL1_DCACHE_LINESIZE);
@@ -833,6 +838,7 @@ dl_init_cacheinfo (struct cpu_features *
     }
 
   cpu_features->level1_icache_size = level1_icache_size;
+  cpu_features->level1_icache_linesize = level1_icache_linesize;
   cpu_features->level1_dcache_size = level1_dcache_size;
   cpu_features->level1_dcache_assoc = level1_dcache_assoc;
   cpu_features->level1_dcache_linesize = level1_dcache_linesize;
diff -up glibc-2.33/sysdeps/x86/dl-diagnostics-cpu.c.omv~ glibc-2.33/sysdeps/x86/dl-diagnostics-cpu.c
--- glibc-2.33/sysdeps/x86/dl-diagnostics-cpu.c.omv~	2021-03-09 19:49:27.131653888 +0100
+++ glibc-2.33/sysdeps/x86/dl-diagnostics-cpu.c	2021-03-09 19:49:50.968497542 +0100
@@ -89,6 +89,8 @@ _dl_diagnostics_cpu (void)
                             cpu_features->rep_stosb_threshold);
   print_cpu_features_value ("level1_icache_size",
                             cpu_features->level1_icache_size);
+  print_cpu_features_value ("level1_icache_linesize",
+                            cpu_features->level1_icache_linesize);
   print_cpu_features_value ("level1_dcache_size",
                             cpu_features->level1_dcache_size);
   print_cpu_features_value ("level1_dcache_assoc",
diff -up glibc-2.33/sysdeps/x86/include/cpu-features.h.omv~ glibc-2.33/sysdeps/x86/include/cpu-features.h
--- glibc-2.33/sysdeps/x86/include/cpu-features.h.omv~	2021-03-09 19:50:11.361982854 +0100
+++ glibc-2.33/sysdeps/x86/include/cpu-features.h	2021-03-09 19:50:30.388791759 +0100
@@ -859,6 +859,8 @@ struct cpu_features
   unsigned long int rep_stosb_threshold;
   /* _SC_LEVEL1_ICACHE_SIZE.  */
   unsigned long int level1_icache_size;
+  /* _SC_LEVEL1_ICACHE_LINESIZE.  */
+  unsigned long int level1_icache_linesize;
   /* _SC_LEVEL1_DCACHE_SIZE.  */
   unsigned long int level1_dcache_size;
   /* _SC_LEVEL1_DCACHE_ASSOC.  */
diff -up glibc-2.33/sysdeps/x86/Makefile.omv~ glibc-2.33/sysdeps/x86/Makefile
--- glibc-2.33/sysdeps/x86/Makefile.omv~	2021-03-09 19:46:14.330252590 +0100
+++ glibc-2.33/sysdeps/x86/Makefile	2021-03-09 19:46:43.790462769 +0100
@@ -208,3 +208,11 @@ $(objpfx)check-cet.out: $(..)sysdeps/x86
 generated += check-cet.out
 endif
 endif
+
+ifeq ($(subdir),posix)
+tests += \
+  tst-sysconf-cache-linesize \
+  tst-sysconf-cache-linesize-static
+tests-static += \
+  tst-sysconf-cache-linesize-static
+endif
diff -up glibc-2.33/sysdeps/x86/tst-sysconf-cache-linesize.c.omv~ glibc-2.33/sysdeps/x86/tst-sysconf-cache-linesize.c
--- glibc-2.33/sysdeps/x86/tst-sysconf-cache-linesize.c.omv~	2021-03-09 19:50:45.552238746 +0100
+++ glibc-2.33/sysdeps/x86/tst-sysconf-cache-linesize.c	2021-03-09 19:51:37.329295367 +0100
@@ -0,0 +1,57 @@
+/* Test system cache line sizes.
+   Copyright (C) 2021 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <array_length.h>
+
+static struct
+{
+  const char *name;
+  int _SC_val;
+} sc_options[] =
+  {
+#define N(name) { "_SC_"#name, _SC_##name }
+    N (LEVEL1_ICACHE_LINESIZE),
+    N (LEVEL1_DCACHE_LINESIZE),
+    N (LEVEL2_CACHE_LINESIZE)
+  };
+
+static int
+do_test (void)
+{
+  int result = EXIT_SUCCESS;
+
+  for (int i = 0; i < array_length (sc_options); ++i)
+    {
+      long int scret = sysconf (sc_options[i]._SC_val);
+      if (scret < 0)
+	{
+	  printf ("sysconf (%s) returned < 0 (%ld)\n",
+		  sc_options[i].name, scret);
+	  result = EXIT_FAILURE;
+	}
+      else
+	printf ("sysconf (%s): %ld\n", sc_options[i].name, scret);
+    }
+
+  return result;
+}
+
+#include <support/test-driver.c>
