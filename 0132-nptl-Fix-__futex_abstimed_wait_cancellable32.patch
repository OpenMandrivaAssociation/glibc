From 50e19ddfcd49cb9e012a6288881a77a48fb0aeaa Mon Sep 17 00:00:00 2001
From: Adhemerval Zanella <adhemerval.zanella@linaro.org>
Date: Mon, 28 Sep 2020 16:05:32 -0300
Subject: [PATCH 132/267] nptl: Fix __futex_abstimed_wait_cancellable32

Similar to 64-bit time __futex_abstimed_wait_cancellable64, it should
check for overflow and convert to 32-bit timespec iff timeout is not
NULL.

It fixes some regression on i686-linux-gnu running on a 4.15 kernel.
---
 sysdeps/nptl/futex-internal.c | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/sysdeps/nptl/futex-internal.c b/sysdeps/nptl/futex-internal.c
index adb3c20611..1594cb6166 100644
--- a/sysdeps/nptl/futex-internal.c
+++ b/sysdeps/nptl/futex-internal.c
@@ -29,16 +29,22 @@ __futex_abstimed_wait_cancellable32 (unsigned int* futex_word,
                                      const struct __timespec64* abstime,
                                      int private)
 {
-  if (! in_time_t_range (abstime->tv_sec))
-    return -EOVERFLOW;
+  struct timespec ts32, *pts32 = NULL;
+  if (abstime != NULL)
+    {
+      if (! in_time_t_range (abstime->tv_sec))
+	return -EOVERFLOW;
+
+      ts32 = valid_timespec64_to_timespec (*abstime);
+      pts32 = &ts32;
+    }
 
   unsigned int clockbit = (clockid == CLOCK_REALTIME)
 	  ? FUTEX_CLOCK_REALTIME : 0;
   int op = __lll_private_flag (FUTEX_WAIT_BITSET | clockbit, private);
 
-  struct timespec ts32 = valid_timespec64_to_timespec (*abstime);
   return INTERNAL_SYSCALL_CANCEL (futex, futex_word, op, expected,
-                                  &ts32, NULL /* Unused.  */,
+                                  pts32, NULL /* Unused.  */,
                                   FUTEX_BITSET_MATCH_ANY);
 }
 #endif
-- 
2.29.0

